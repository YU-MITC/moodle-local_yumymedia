{"version":3,"file":"moduleuploader.min.js","sources":["../src/moduleuploader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Uploader Script used in resource and activirty modules.\n *\n * @copyright (C) 2016-2025 Yamaguchi University (gh-cc@mlex.cc.yamaguchi-u.ac.jp)\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module local_yumymedia/moduleuploader\n */\n\ndefine(['jquery'], function($) {\n\n    return {\n        /**\n         * Initial function.\n         * @access public\n         */\n        init: function() {\n\n            var modalX = 0;\n            var modalY = 0;\n            var timer = false;\n\n            var fileName = \"\";\n            var fileSize = 0;\n\n            var MEDIA_TYPE = {\n                VIDEO: 1,\n                IMAGE: 2,\n                AUDIO: 5\n            };\n\n            var AUTO_FINALIZE = {\n                TRUE: 1,\n                FALSE: 0,\n                NULL: -1\n            };\n\n            var ENTRY_STATUS = {\n                ENTRY_IMPORTING: -2,\n                ENTRY_CONVERTING: -1,\n                ENTRY_IMPORT: 0,\n                ENTRY_PRECONVERT: 1,\n                ENTRY_READY: 2,\n                ENTRY_DELETED: 3,\n                ENTRY_PENDING: 4,\n                ENTRY_MODERATE: 5,\n                ENTRY_BLOCKED: 6,\n                ENTRY_NO_CONTENT: 7\n            };\n\n            var UPLOAD_TOKEN_STATUS = {\n                PENDING: 0,\n                PARTIAL_UPLOAD: 1,\n                FULL_UPLOAD: 2,\n                CLOSED: 3,\n                TIMED_OUT: 4,\n                DELETED: 5\n            };\n\n            /**\n             * This function centerize modal window.\n             * @access public\n             * @param {object} contentPanel - HTML element of content panel.\n             */\n            function centeringModalSyncer(contentPanel) {\n                if (timer !== false) {\n                    clearTimeout(timer);\n                }\n                timer = setTimeout(function() {\n                    // Get width and height of window.\n                    var w = $(window).width();\n                    var h = $(window).height();\n\n                    // Get width and height of modal content.\n                    var cw = $(contentPanel).outerWidth();\n                    var ch = $(contentPanel).outerHeight();\n\n                    // Execute centering of modal window.\n                    $(contentPanel).css({\"left\": ((w - cw) / 2) + \"px\", \"top\": ((h - ch) / 2) + \"px\"});\n                }, 200);\n            }\n\n            /**\n             * This function delete modal window.\n             * @access public\n             */\n            function fadeOutUploaderWindow() {\n\n                // Restore scroll position of base window.\n                window.scrollTo(modalX, modalY);\n\n                // Fade-out and delete modal contet and modal window.\n                $(\"#modal_window\", parent.document).fadeOut(\"slow\");\n                $(\"#modal_window\", parent.document).remove();\n                $(\"#uploader_content\", parent.document).fadeOut(\"slow\");\n                $(\"#uploader_content\", parent.document).remove();\n            }\n\n            /**\n             * This function checks metadata.\n             * @access public\n             */\n            function checkForm() {\n                if ($(\"#fileData\") === null ||\n                    $(\"#fileData\").files === null ||\n                    $(\"#name\").val() === \"\" ||\n                    $(\"#tags\").val() === \"\" ||\n                    $(\"#type\").val() === \"\" ||\n                    $(\"#type\").val() === \"N/A\") {\n                    // Dsiable upload button.\n                    $(\"#entry_submit\").prop(\"disabled\", true);\n                    $(\"#entry\").val(\"\");\n                } else {\n                    // Enable upload button.\n                    $(\"#entry_submit\").prop(\"disabled\", false);\n                }\n            }\n\n            /**\n             * This function checks file size.\n             * @access public\n             * @return {bool} - The file can upload?\n             */\n            function checkFileSize() {\n                var maximumDataSizeStr = $(\"#maximumDataSize\").val();\n                var maximumDataSize = parseInt(maximumDataSizeStr, 10);\n\n                if (fileSize <= 0) {\n                    return false;\n                }\n                if (fileSize > maximumDataSize) {\n                    return false;\n                }\n                return true;\n            }\n\n            /**\n             * This function checks file type.\n             * @access public\n             * @param {string} fileType - file type of selected media.\n             * @return {string} - media type string for kaltura server.\n             */\n            function checkFileType(fileType) {\n                if (fileType.indexOf(\"video/avi\") != -1 || fileType.indexOf(\"video/x-msvideo\") != -1 ||\n                    fileType.indexOf(\"video/mpeg\") != -1 || fileType.indexOf(\"video/mpg\") != -1 ||\n                    fileType.indexOf(\"video/mp4\") != -1 || fileType.indexOf(\"video/ogg\") != -1 ||\n                    fileType.indexOf(\"video/quicktime\") != -1 || fileType.indexOf(\"video/VP8\") != -1 ||\n                    fileType.indexOf(\"video/x-flv\") != -1 || fileType.indexOf(\"video/x-f4v\") != -1 ||\n                    fileType.indexOf(\"video/x-matroska\") != -1 ||\n                    fileType.indexOf(\"video/x-ms-wmv\") != -1 || fileType.indexOf(\"video/webm\") != -1) {\n                    return \"video\";\n                }\n\n                if (fileType.indexOf(\"audio/ac3\") != -1 || fileType.indexOf(\"audio/ogg\") != -1 ||\n                    fileType.indexOf(\"audio/mpeg\") != -1 || fileType.indexOf(\"audio/mp4\") != -1 ||\n                    fileType.indexOf(\"audio/mp3\") != -1 ||\n                    fileType.indexOf(\"audio/wav\") != -1 || fileType.indexOf(\"audio/x-ms-wma\") != -1) {\n                    return \"audio\";\n                }\n\n                if (fileType.indexOf(\"image/gif\") != -1 || fileType.indexOf(\"image/jpeg\") != -1 ||\n                    fileType.indexOf(\"image/png\") != -1 || fileType.indexOf(\"image/tiff\") != -1) {\n                    return \"image\";\n                }\n\n                return \"N/A\";\n            }\n\n            /**\n             * This function is callback for selection of media file.\n             * @access public\n             */\n            function handleFileSelect() {\n                var alertInfo = '';\n\n                // There exists selected file.\n                if ($(\"#fileData\")) {\n                    // Get an object of selected file.\n                    var file = $(\"#fileData\").prop(\"files\")[0];\n\n                    fileSize = parseInt(file.size);\n                    var typeResult = checkFileType(encodeURI(file.type));\n                    var sizeResult = checkFileSize();\n\n                    require(['core/str', 'core/notification'], function(str, notification) {\n                        var strings = [\n                            {key: 'wrong_filesize', component: 'local_yumymedia'},\n                            {key: 'unsupported_filetype', component: 'local_yumymedia'},\n                            {key: 'filesize', component: 'local_yumymedia'},\n                            {key: 'mimetype', component: 'local_yumymedia'}\n                        ];\n                        str.get_strings(strings).then(function(results) {\n                            // When file size is wrong.\n                            if (sizeResult === false) {\n                                alertInfo += results[0];\n                            }\n                            // When file is no supported.\n                            if (typeResult == \"N/A\") {\n                                alertInfo += results[1];\n                            }\n\n                            // When any warning occures.\n                            if (alertInfo !== \"\") {\n                                window.alert(alertInfo);\n                                $(\"#file_info\").html(\"\");\n                                $(\"#name\").val(\"\");\n                                $(\"#tags\").val(\"\");\n                                $(\"#description\").val(\"\");\n                                $(\"#type\").val(\"\");\n                                $(\"#fileData\").val(\"\");\n                            } else { // When any warning do not occures.\n                                var fileInfo = \"\";\n                                var sizeStr = \"\";\n                                var dividedSize = 0;\n\n                                fileName = file.name;\n\n                                if (fileSize > 1024 * 1024 * 1024) { // When file size exceeds 1GB.\n                                    dividedSize = fileSize / (1024 * 1024 * 1024);\n                                    sizeStr = dividedSize.toFixed(2) + \" G\";\n                                } else if (fileSize > 1024 * 1024) { // When file size exceeds 1MB.\n                                    dividedSize = fileSize / (1024 * 1024);\n                                    sizeStr = dividedSize.toFixed(2) + \" M\";\n                                } else if (fileSize > 1024) { // When file size exceeds 1kB.\n                                    dividedSize = fileSize / 1024;\n                                    sizeStr = dividedSize.toFixed(2) + \" k\";\n                                } else { // When file size under 1kB.\n                                    sizeStr = fileSize + \" \";\n                                }\n\n                                fileInfo += \"<div id=metadata_fields>\";\n                                fileInfo += results[2] + \": \" + sizeStr + \"bytes<br>\";\n                                fileInfo += results[3] + \":\" + encodeURI(file.type) + \"<br>\";\n                                fileInfo += \"</div><hr>\";\n\n                                $(\"#file_info\").html(fileInfo);\n                                $(\"#name\").val(fileName);\n                                $(\"#type\").val(typeResult);\n                            }\n                            checkForm();\n                            return 0;\n                        }).fail(notification.exception);\n                    });\n                }\n            }\n\n            /**\n             * This function is callback for reset button.\n             * @access public\n             */\n            function handleResetClick() {\n                $(\"#file_info\").html(\"\");\n                $(\"#type\").val(\"\");\n            }\n\n            /**\n             * This function checks name of media.\n             * @access public\n             * @param {string} str - name of media.\n             * @return {bool} - if name is appropriate, return \"true\". Otherwise, return \"false\".\n             */\n            function checkNameString(str) {\n                var regex = /[\"$%&'~^\\\\`/]/;\n                if (regex.test(str) === true) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n\n            /**\n             * This function checks tags of media.\n             * @access public\n             * @param {string} str - tagas of media.\n             * @return {bool} - if tags are appropriate, return \"true\". Otherwise, return \"false\".\n             */\n            function checkTagsString(str) {\n                var regex = /[!\"#$%&'~|^\\\\@`()[\\]{}:;+*/=<>?]/;\n                if (regex.test(str) === true) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n\n            /**\n             * This function checks metadata of media.\n             * @access public\n             * @return {bool} - if metadata is appropriate, return \"true\". Otherwise, return \"false\".\n             */\n            function checkMetadata() {\n                var nameStr = $(\"#name\").val();\n                var tagsStr = $(\"#tags\").val();\n                var descStr = $(\"#description\").val();\n\n                var flag = true;\n\n                if (checkNameString(nameStr) === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_name', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    flag = false;\n                }\n\n                if (checkTagsString(tagsStr) === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_tags', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    flag = false;\n                }\n\n                if (checkNameString(descStr) === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_desc', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    flag = false;\n                }\n\n                return flag;\n            }\n\n            /**\n             * This function is callback for submit button.\n             * @access public\n             * @return {bool} - if file is uploaded, return true. Otherwise, return false.\n             */\n            function handleSubmitClick() {\n\n                if (checkMetadata() === false) {\n                    return false;\n                }\n                if (checkFileSize() === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_filesize', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    return false;\n                }\n\n                $(\"#entry_submit\").prop(\"disabled\", true);\n                executeUploadProcess(); // Executes upload.\n\n                return true;\n            }\n\n            /**\n             * This function close kaltura session.\n             * @access public\n             */\n            function sessionEnd() {\n                var serverHost = $(\"#kalturahost\").val(); // Get hostname of kaltura server.\n                var serviceURL = serverHost + \"/api_v3/service/session/action/end\";\n\n                // Transmits data.\n                $.ajax({\n                    type: \"GET\",\n                    url: serviceURL,\n                    cache: false\n                })\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null) {\n                        window.console.log(\"Cannot delete the uploadToken ! (Cannot get a XML response.)\");\n                    } else {\n                        window.console.log(\"Kaltura Session has been deleted.\");\n                    }\n                })\n                .fail(function(xmlData) {\n                    window.console.log(\"Cannot delete the uploadToken ! (Cannot connect to content server.)\");\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                });\n            }\n\n            /**\n             * This function prints error message.\n             * @access public\n             * @param {string} errorMessage - string of error message.\n             * @param {string} ks - session string of kaltura connecion;\n             * @param {string} uploadTokenId - upload token id.\n             */\n            function printErrorMessage(errorMessage, ks, uploadTokenId) {\n                if (ks !== \"\" && uploadTokenId !== \"\") {\n                    deleteUploadToken();\n                }\n                $(\"#upload_info\").html(\"\");\n                $(\"#upload_info\").append(\"<font color=\\\"red\\\">\" + errorMessage + \"</font><br>\");\n                addBackButton();\n            }\n\n            /**\n             * This function prints success message.\n             * @access public\n             * @param {string} id - id of media entry.\n             * @param {string} name - name of media entry.\n             * @param {string} tags - tags of media entry.\n             * @param {string} description - description of media entry.\n             * @param {string} creatorId - username of creator.\n             */\n            function printSuccessMessage(id, name, tags, description, creatorId) {\n                var output = \"<h3>Your upload has been suceeded !</h3>\";\n\n                output += \"<table border=\\\"2\\\" cellpadding=\\\"5\\\">\";\n                output += \"<tr><td>entry id</td><td>\" + id + \"</td></tr>\";\n                output += \"<tr><td>name</td><td>\" + name + \"</td></tr>\";\n                output += \"<tr><td>tags</td><td>\" + tags + \"</td></tr>\";\n                output += \"<tr><td>description</td><td>\" + description + \"</td></tr>\";\n                output += \"<tr><td>creator id</td><td>\" + creatorId + \"</td></tr>\";\n                output += \"</table>\";\n                output += \"<br>\";\n                output += \"<input type=button id=\\\"backToMymedia\\\" name=\\\"backToMymedia\\\" value=\\\"Back\\\" />\";\n\n                $(\"#upload_info\").html(output);\n\n                $(\"#backToMymedia\").on(\"click\", function() {\n                    fadeOutUploaderWindow();\n                });\n\n                require(['core/str', 'core/notification'], function(str, notification) {\n                    var strings = [\n                        {key: 'upload_success', component: 'local_yumymedia'},\n                        {key: 'entryid_header', component: 'local_yumymedia'},\n                        {key: 'name_header', component: 'local_yumymedia'},\n                        {key: 'tags_header', component: 'local_yumymedia'},\n                        {key: 'desc_header', component: 'local_yumymedia'},\n                        {key: 'creatorid_header', component: 'local_yumymedia'},\n                        {key: 'back_label', component: 'local_yumymedia'}\n                    ];\n                    str.get_strings(strings).then(function(results) {\n                        var output = '<h3>' + results[0] + '</h3>';\n                        output += \"<table border=\\\"2\\\" cellpadding=\\\"5\\\">\";\n                        output += \"<tr><td>\" + results[1] + \"</td><td>\" + id + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[2] + \"</td><td>\" + name + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[3] + \"</td><td>\" + tags + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[4] + \"</td><td>\" + description + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[5] + \"</td><td>\" + creatorId + \"</td></tr>\";\n                        output += \"</table>\";\n                        output += \"<br>\";\n                        output += \"<input type=button id=\\\"backToMymedia\\\" name=\\\"backToMymedia\\\" value=\\\"\";\n                        output += results[6] + \"\\\" />\";\n\n                        $(\"#upload_info\").html(output);\n\n                        $(\"#backToMymedia\").on(\"click\", function() {\n                            fadeOutUploaderWindow();\n                        });\n                        return 0;\n                    }).fail(notification.exception);\n                });\n            }\n\n            /**\n             * This function set module properties.\n             * @access public\n             * @param {string} serverHost - URI of server host.\n             * @param {string} id - id of media entry.\n             * @param {string} name - name of media entry.\n             * @param {string} description - description of media entry.\n             */\n            function setModuleProperties(serverHost, id, name, description) {\n                if (id !== null && id !== \"\") {\n                    if (id !== null) {\n                        $(\"#entry_id\", parent.document).val(id);\n                    }\n\n                    var idName = $(\"#id_name\", parent.document);\n\n                    if (idName !== null) {\n                        idName.val(name);\n                    }\n\n                    if (description !== null) {\n                        description = description.replace(/\\n/g, \"<br />\");\n                    }\n\n                    description = \"<p>\" + description + \"<br /></p>\";\n\n                    var editor = $(\"#id_introeditoreditable\", parent.document);\n\n                    if (editor !== null) {\n                        if (description !== null && description !== \"\") {\n                            editor.html(description);\n                        } else {\n                            editor.html(\"\");\n                        }\n                    }\n\n                    editor = $(\"#id_introeditor\", parent.document);\n\n                    if (editor !== null) {\n                        if (description !== null && description !== \"\") {\n                            editor.html(description);\n                        } else {\n                            editor.html(\"\");\n                        }\n                    }\n\n                    var partnerid = $(\"#partner_id\", parent.document).val();\n\n                    var source = serverHost + \"/p/\" + partnerid + \"/sp/\" + partnerid + \"00/thumbnail/entry_id/\" + id;\n                    source = source + \"/width/150/height/100/type/3\";\n\n                    var idMediaThumbnail = $(\"#media_thumbnail\", parent.document);\n                    if (idMediaThumbnail !== null) {\n                        idMediaThumbnail.prop(\"src\", source);\n                        idMediaThumbnail.prop(\"alt\", name);\n                        idMediaThumbnail.prop(\"title\", name);\n                    }\n\n                    var idMediaProperties = $(\"#id_media_properties\", parent.document);\n                    if (idMediaProperties !== null) {\n                        idMediaProperties.css({visibility: \"visible\"});\n                    }\n\n                    var submitMedia = $(\"#submit_media\", parent.document);\n                    if (submitMedia !== null) {\n                        submitMedia.prop(\"disabled\", false);\n                    }\n                }\n            }\n\n            /**\n             * This function adds back button.\n             * @access public\n             */\n            function addBackButton() {\n                require(['core/str'], function(str) {\n                    var message = str.get_string('back_label', 'local_yumymedia', null);\n                    $.when(message).done(function(localizedString) {\n                        var contentHtml = \"<br><input type=button id=\\\"backToMymedia\\\" name=\\\"backToMymedia\\\" value=\\\"\";\n                        contentHtml += localizedString + \"\\\" />\";\n                        $(\"#upload_info\").append(contentHtml);\n\n                        $(\"#backToMymedia\").on(\"click\", function() {\n                            fadeOutUploaderWindow();\n                        });\n                    });\n                });\n            }\n\n            /**\n             * This function executes upload process.\n             * @access public\n             */\n            function executeUploadProcess() {\n                var serverHost = $(\"#kalturahost\").val(); // Get hostname of kaltura server.\n                var ks = $(\"#ks\").val(); // Get session id.\n                // Create upload token.\n                createUploadToken(serverHost, ks);\n            }\n\n            /**\n             * This function deletes upload token.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             * @param {string} uploadTokenId - token id for uploading.\n             * @return {bool} if upload token is deleted, return true.\n             */\n            function deleteUploadToken(serverHost, ks, uploadTokenId) {\n                var fd = new FormData();\n                var flag;\n\n                // Set form data.\n                fd.append(\"action\", \"delete\");\n                fd.append(\"ks\", ks);\n                fd.append(\"uploadTokenId\", uploadTokenId);\n\n                // Set transmission data.\n                var postData = {\n                    type: \"POST\",\n                    data: fd,\n                    cache: false,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    processData: false,\n                    async: true,\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/uploadToken/action/delete\";\n\n                // Transmits a data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // When response is not XML.\n                    if (xmlData === null) {\n                        flag = false;\n                    }\n                    flag = true;\n                })\n                .fail(function(xmlData) {\n                    flag = false;\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                });\n\n                return flag;\n            }\n\n            /**\n             * This function creates upload token.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             */\n            function createUploadToken(serverHost, ks) {\n                var uploadTokenId;\n                var findData;\n\n                var file = $(\"#fileData\").prop(\"files\")[0];\n\n                fileSize = parseInt(encodeURI(file.size));\n\n                var postData = {\n                    type: \"GET\",\n                    cache: false,\n                    async: true,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/uploadToken/action/add?ks=\" + ks;\n                serviceURL = serviceURL + \"&uploadToken:objectType=KalturaUploadToken\";\n                serviceURL = serviceURL + \"uploadToken:fileName=\" + encodeURI(fileName);\n                serviceURL = serviceURL + \"&uploadToken:fileSize=\" + fileSize;\n                serviceURL = serviceURL + \"&uploadToken:autoFinalize=\" + AUTO_FINALIZE.NULL;\n\n                // Transmits data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null) {\n                        printErrorMessage(\"Cannot create upload token !<br>(Cannot get a XML response.)\");\n                        return;\n                    }\n\n                    // Get a tag of error code.\n                    findData = $(xmlData).find(\"code\");\n                    // There exists error code.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        printErrorMessage(\"Cannot create upload token !<br>(\" + findData.text() + \")\");\n                        return;\n                    }\n\n                    findData = $(xmlData).find(\"status\");\n                    // There not exists upload token id.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        printErrorMessage(\"Cannot create upload token !<br>(Cannot get status of upload token.)\");\n                        return;\n                    }\n\n                    var uploadTokenStatus = findData.text();\n                    if (uploadTokenStatus != UPLOAD_TOKEN_STATUS.PENDING) {\n                        printErrorMessage(\"Cannot create upload token !<br>(UPLOAD_TOKEN_STATUS : \" + uploadTokenStatus + \")\");\n                        return;\n                    }\n                    // Get upload token id.\n                    findData = $(xmlData).find(\"id\");\n                    // There not exists upload token id.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        printErrorMessage(\"Cannot create uplaod token !<br>(Cannot get an uploadTokenId.)\");\n                        return;\n                    }\n                    uploadTokenId = findData.text();\n                    // Entry metadata.\n                    setTimeout(function() {\n                        createMediaEntry(serverHost, ks, uploadTokenId);\n                    }, 50);\n\n                })\n                .fail(function(xmlData) {\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                    printErrorMessage(\"Cannot create upload token !<br>(Cannot connect to kaltura server.)\");\n                });\n            }\n\n            /**\n             * This function creates media entry.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connecion;\n             * @param {string} uploadTokenId - upload token id.\n             */\n            function createMediaEntry(serverHost, ks, uploadTokenId) {\n                var findData;\n                var entryStatus;\n                var entryId = \"\";\n                var entryName = \"\";\n                var entryTags = \"\";\n                var entryDescription = \"\";\n                var entryCreatorId = \"\";\n\n                var nameStr = $(\"#name\").val();\n                var tagsStr = $(\"#tags\").val();\n                var descStr = $(\"#description\").val();\n                var controlId = $(\"#controlId\").val();\n                var creatorId = $(\"#creatorId\").val();\n\n                nameStr = nameStr.trim();\n                tagsStr = tagsStr.trim();\n                if (descStr !== null) {\n                    descStr = descStr.trim();\n                }\n\n                var fd = new FormData();\n\n                // Creates form data.\n                fd.append(\"action\", \"add\");\n                fd.append(\"ks\", ks);\n                fd.append(\"entry:objectType\", \"KalturaMediaEntry\");\n\n                var type = $(\"#type\").val();\n                var mediaType = \"\";\n\n                if (type == \"image\") {\n                    mediaType = MEDIA_TYPE.IMAGE;\n                } else if (type == \"audio\") {\n                    mediaType = MEDIA_TYPE.AUDIO;\n                } else {\n                    mediaType = MEDIA_TYPE.VIDEO;\n                }\n\n                fd.append(\"entry:mediaType\", mediaType);\n                fd.append(\"entry:sourceType\", 1);\n                fd.append(\"entry:name\", nameStr);\n                fd.append(\"entry:tags\", tagsStr);\n                if (descStr !== null && descStr !== \"\") {\n                    fd.append(\"entry:description\", descStr);\n                } else {\n                    fd.append(\"entry:description\", \"\");\n                }\n\n                fd.append(\"entry:categories\", $(\"#categories\").val());\n\n                if (controlId !== null && controlId !== \"\") {\n                    fd.append(\"entry:accessControlId\", controlId);\n                }\n\n                fd.append(\"entry:creatorId\", creatorId);\n                fd.append(\"entry:userId\", creatorId);\n\n                // Creates transmission data.\n                var postData = {\n                    type: \"POST\",\n                    data: fd,\n                    cache: false,\n                    async: true,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    processData: false,\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/media/action/add\";\n\n                // Transmits data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null || typeof xmlData === \"undefined\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entry !<br>(Cannot get a XML response.)\");\n                        return;\n                    }\n\n                    // Get a tag of error code.\n                    findData = $(xmlData).find(\"code\");\n                    // There exists an error code.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entry !<br>(\" + findData.text() + \")\");\n                        return;\n                    }\n\n                    // Get a tag of status.\n                    findData = $(xmlData).find(\"status\");\n                    // There not exists a tag of status.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entyry !<br>(Cannot get a mediaEntryStatus.)\");\n                        return;\n                    }\n\n                    // Get a value of status.\n                    entryStatus = findData.text();\n                    // When uploading of metadata failed.\n                    if (entryStatus != ENTRY_STATUS.ENTRY_NO_CONTENT) {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entry!<br>(mediaEntryStatus: \" + entryStatus + \")\");\n                        return;\n                    }\n\n                    // Get a tag of entry id.\n                    findData = $(xmlData).find(\"id\");\n                    // Get a value of entry id.\n                    entryId = findData.text();\n                    // Get a tag of name.\n                    findData = $(xmlData).find(\"name\");\n                    // Get a value of name.\n                    entryName = findData.text();\n                    // Get a tag of tags.\n                    findData = $(xmlData).find(\"tags\");\n                    // Get a value of tags.\n                    entryTags = findData.text();\n                    // Get a tag of description.\n                    findData = $(xmlData).find(\"description\");\n                    // There exists description.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        // Get a value of description.\n                        entryDescription = findData.text();\n                    } else {\n                        entryDescription = \"\";\n                    }\n                    // Get a tago of creator id.\n                    findData = $(xmlData).find(\"creatorId\");\n                    // Get a value of creator id.\n                    entryCreatorId = findData.text();\n\n                    if (entryId === null || entryId === \"\" || entryName === null || entryName === \"\" ||\n                        entryTags === null || entryTags === \"\" || entryCreatorId === null || entryCreatorId === \"\" ||\n                        descStr !== \"\" && (entryDescription === null || entryDescription === \"\")) {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"There exists wrong information(s) <br>\");\n                        return;\n                    }\n\n                    // Associate uploaded file with media entry.\n                    setTimeout(function() {\n                        uploadMediaFile(serverHost, ks, uploadTokenId, entryId);\n                    }, 50);\n\n                })\n                .fail(function(xmlData) {\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                    deleteUploadToken(serverHost, ks, uploadTokenId);\n                    printErrorMessage(\"Cannot create media entry !<br>(Cannot connect to kaltura server.)\");\n                    return;\n                });\n            }\n\n            /**\n             * This function uploads media file.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             * @param {string} uploadTokenId - upload token id.\n             * @param {string} entryId - id of media entry.\n             */\n            function uploadMediaFile(serverHost, ks, uploadTokenId, entryId) {\n                var findData;\n                var fd = new FormData();\n\n                require(['core/str', 'core/notification'], function(str, notification) {\n                    var strings = [\n                        {key: 'uploader_uploading', component: 'local_yumymedia'},\n                        {key: 'progress', component: 'local_yumymedia'},\n                        {key: 'attach_file', component: 'local_yumymedia'}\n                    ];\n                    str.get_strings(strings).then(function(results) {\n                        // Creates form data.\n                        fd.append(\"action\", \"upload\");\n                        fd.append(\"ks\", ks);\n                        fd.append(\"uploadTokenId\", uploadTokenId);\n                        fd.append(\"fileData\", $(\"input[name='fileData']\").prop(\"files\")[0], encodeURI(fileName), fileSize);\n                        fd.append(\"resume\", false);\n                        fd.append(\"finalChunk\", true);\n                        fd.append(\"resumeAt\", 0);\n\n                        // Creates tnramission data.\n                        var postData = {\n                            type: \"POST\",\n                            data: fd,\n                            cache: false,\n                            async: true,\n                            contentType: false,\n                            scriptCharset: \"utf-8\",\n                            processData: false,\n                            dataType: \"xml\",\n                            xhr: function() {\n                                var XHR = $.ajaxSettings.xhr();\n                                if (XHR.upload) {\n                                    XHR.upload.addEventListener(\"progress\", function(e) {\n                                        var newValue = parseInt(e.loaded / e.total * 100);\n                                        $(\"#pvalue\").html(parseInt(newValue));\n                                    }, false);\n                                }\n                                return XHR;\n                            }\n                        };\n\n                        $(\"#upload_info\").html(\"\");\n\n                        $(\"#upload_info\").append(results[0] + \"<br>\");\n\n                        var message = \"<p>\" + results[1];\n                        message = message + \": <span id=\\\"pvalue\\\" style=\\\"color:#00b200\\\">0.00</span> %</p>\";\n\n                        $(\"#upload_info\").append(message);\n\n                        var serviceURL = serverHost + \"/api_v3/service/uploadToken/action/upload\";\n\n                        // Transmits data.\n                        $.ajax(\n                            serviceURL, postData\n                        )\n                        .done(function(xmlData) {\n                            // Response is not XML.\n                            if (xmlData === null) {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(Cannot get a XML response.)\");\n                                return;\n                            }\n\n                            // Get a tag of error code.\n                            findData = $(xmlData).find(\"code\");\n                            // There exists error code.\n                            if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(\" + findData.text() + \")\");\n                                return;\n                            }\n\n                            // Get upload token id.\n                            findData = $(xmlData).find(\"status\");\n                            // There not exists upload token id.\n                            if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(Cannot get an uploadTokenStatus.)\");\n                                return;\n                            }\n\n                            var uploadTokenStatus = findData.text();\n                            if (uploadTokenStatus != UPLOAD_TOKEN_STATUS.FULL_UPLOAD &&\n                                uploadTokenStatus != UPLOAD_TOKEN_STATUS.PARTIAL_UPLOAD) {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(UPLOAD_TOKEN_STATUS : \" + uploadTokenStatus + \")\");\n                                return;\n                            } else {\n                                window.console.log(\"File chunk have been transmitted.\");\n                            }\n\n                            $(\"#upload_info\").append(results[2] + \"<br>\");\n\n                            // Create media entry.\n                            setTimeout(function() {\n                                attachUploadedFile(serverHost, ks, uploadTokenId, entryId);\n                            }, 1000);\n\n                        })\n                        .fail(function(xmlData) {\n                            if (xmlData !== null) {\n                                window.console.dir(xmlData);\n                            }\n                            deleteUploadToken(serverHost, ks, uploadTokenId);\n                            printErrorMessage(\"Cannot upload the file !<br>(Cannot connect to contents server.)\");\n                            return;\n                        });\n                        return 0;\n                    }).fail(notification.exception);\n                });\n            }\n\n            /**\n             * This function uploads metadata.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             * @param {string} uploadTokenId - upload token id.\n             * @param {string} entryId - id of media entry.\n             */\n            function attachUploadedFile(serverHost, ks, uploadTokenId, entryId) {\n                var entryStatus;\n                var entryName = \"\";\n                var entryTags = \"\";\n                var entryDescription = \"\";\n                var entryCreatorId = \"\";\n\n                var findData;\n\n                // Creates form data.\n                var fd = new FormData();\n                fd.append(\"action\", \"addContent\");\n                fd.append(\"ks\", ks);\n                fd.append(\"entryId\", entryId);\n                fd.append(\"resource:objectType\", \"KalturaUploadedFileTokenResource\");\n                fd.append(\"resource:token\", uploadTokenId);\n\n                // Creates transmission data.\n                var postData = {\n                    type: \"POST\",\n                    data: fd,\n                    cache: false,\n                    async: true,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    processData: false,\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/media/action/addContent\";\n\n                // Transmits data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null || typeof xmlData === \"undefined\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(Cannot get a XML response.)\");\n                        return;\n                    }\n\n                    // Get a tag of error code.\n                    findData = $(xmlData).find(\"code\");\n                    // There exists error code.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(\" + findData.text() + \")\");\n                        return;\n                    }\n\n                    // Get a tag of status.\n                    findData = $(xmlData).find(\"status\");\n                    // There not exists a tag of status.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(Cannot get a mediaEntryStatus.)\");\n                        return;\n                    }\n\n                    // Get a value of status.\n                    entryStatus = findData.text();\n                    // When uploading of metadata failed.\n                    if (entryStatus != ENTRY_STATUS.ENTRY_READY && entryStatus != ENTRY_STATUS.ENTRY_PENDING &&\n                        entryStatus != ENTRY_STATUS.ENTRY_PRECONVERT && entryStatus != ENTRY_STATUS.IMPORT &&\n                        entryStatus != ENTRY_STATUS.IMPORTING) {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(mediaEntryStatus: \" + entryStatus + \")\");\n                        return;\n                    }\n\n                    // Get a tag of entry id.\n                    findData = $(xmlData).find(\"id\");\n                    // Get a value of entry id.\n                    entryId = findData.text();\n                    // Get a tag of name.\n                    findData = $(xmlData).find(\"name\");\n                    // Get a value of name.\n                    entryName = findData.text();\n                    // Get a tag of tags.\n                    findData = $(xmlData).find(\"tags\");\n                    // Get a value of tags.\n                    entryTags = findData.text();\n                    // Get a tag of description.\n                    findData = $(xmlData).find(\"description\");\n                    // There exists description.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        // Get a value of description.\n                        entryDescription = findData.text();\n                    } else {\n                        entryDescription = \"\";\n                    }\n                    // Get a tago of creator id.\n                    findData = $(xmlData).find(\"creatorId\");\n                    // Get a value of creator id.\n                    entryCreatorId = findData.text();\n\n                    // Prints success message.\n                    printSuccessMessage(entryId, entryName, entryTags, entryDescription, entryCreatorId);\n                    // Update module properties.\n                    setModuleProperties(serverHost, entryId, entryName, entryDescription);\n\n                })\n                .fail(function(xmlData) {\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                    deleteUploadToken(serverHost, ks, uploadTokenId);\n                    printErrorMessage(\"Cannot attach uploaded file !<br>(Cannot connect to kaltura server.)\");\n                    return;\n                });\n            }\n\n            // This function execute when window is chagned.\n            $(window).on(\"change\", function() {\n                checkForm();\n            });\n\n            // This function execute when window is uloaded.\n            $(window).on(\"unload\", function() {\n                sessionEnd();\n            });\n\n            // This function execute when window is resized.\n            $(window).resize(centeringModalSyncer(\"#uploader_content\"));\n\n            $(\"#fileData\").on(\"change\", function() {\n                handleFileSelect();\n            });\n\n            $(\"#name\").on(\"change\", function() {\n                checkForm();\n            });\n\n            $(\"#tags\").on(\"change\", function() {\n                checkForm();\n            });\n\n            $(\"#entry_submit\").on(\"click\", function() {\n                handleSubmitClick();\n            });\n\n            $(\"#uploader_cancel\").on(\"click\", function() {\n                fadeOutUploaderWindow();\n            });\n\n            $(\"#entry_reset\").on(\"click\", function() {\n                handleResetClick();\n            });\n\n            $(\"#fadeout\").on(\"click\", function() {\n                fadeOutUploaderWindow();\n            });\n        }\n    };\n});\n"],"names":["define","$","init","contentPanel","timer","fileName","fileSize","MEDIA_TYPE","AUTO_FINALIZE","ENTRY_STATUS","ENTRY_IMPORTING","ENTRY_CONVERTING","ENTRY_IMPORT","ENTRY_PRECONVERT","ENTRY_READY","ENTRY_DELETED","ENTRY_PENDING","ENTRY_MODERATE","ENTRY_BLOCKED","ENTRY_NO_CONTENT","UPLOAD_TOKEN_STATUS","fadeOutUploaderWindow","window","scrollTo","parent","document","fadeOut","remove","checkForm","files","val","prop","checkFileSize","maximumDataSizeStr","maximumDataSize","parseInt","checkNameString","str","test","handleSubmitClick","nameStr","tagsStr","descStr","flag","require","message","get_string","when","done","localizedString","alert","serverHost","ks","uploadTokenId","findData","file","encodeURI","size","postData","type","cache","async","contentType","scriptCharset","dataType","serviceURL","ajax","xmlData","find","text","uploadTokenStatus","setTimeout","entryStatus","entryId","entryName","entryTags","entryDescription","entryCreatorId","controlId","creatorId","trim","fd","FormData","append","mediaType","data","processData","deleteUploadToken","printErrorMessage","notification","strings","key","component","get_strings","then","results","xhr","XHR","ajaxSettings","upload","addEventListener","e","newValue","loaded","total","html","console","log","IMPORT","IMPORTING","id","name","tags","description","output","on","fail","exception","printSuccessMessage","idName","replace","editor","partnerid","source","idMediaThumbnail","idMediaProperties","css","visibility","submitMedia","setModuleProperties","dir","attachUploadedFile","uploadMediaFile","createMediaEntry","createUploadToken","errorMessage","contentHtml","url","resize","clearTimeout","w","width","h","height","cw","outerWidth","ch","outerHeight","fileType","alertInfo","typeResult","indexOf","sizeResult","fileInfo","sizeStr","toFixed","handleFileSelect"],"mappings":";;;;;;AA0BAA,wCAAO,CAAC,WAAW,SAASC,SAEjB,CAKHC,KAAM,eAgD4BC,aA5C1BC,OAAQ,EAERC,SAAW,GACXC,SAAW,EAEXC,iBACO,EADPA,iBAEO,EAFPA,iBAGO,EAGPC,oBAGO,EAGPC,aAAe,CACfC,iBAAkB,EAClBC,kBAAmB,EACnBC,aAAc,EACdC,iBAAkB,EAClBC,YAAa,EACbC,cAAe,EACfC,cAAe,EACfC,eAAgB,EAChBC,cAAe,EACfC,iBAAkB,GAGlBC,4BACS,EADTA,mCAEgB,EAFhBA,gCAGa,WAiCRC,wBAGLC,OAAOC,SAvEE,EACA,GAyETtB,EAAE,gBAAiBuB,OAAOC,UAAUC,QAAQ,QAC5CzB,EAAE,gBAAiBuB,OAAOC,UAAUE,SACpC1B,EAAE,oBAAqBuB,OAAOC,UAAUC,QAAQ,QAChDzB,EAAE,oBAAqBuB,OAAOC,UAAUE,kBAOnCC,YACkB,OAAnB3B,EAAE,cACuB,OAAzBA,EAAE,aAAa4B,OACM,KAArB5B,EAAE,SAAS6B,OACU,KAArB7B,EAAE,SAAS6B,OACU,KAArB7B,EAAE,SAAS6B,OACU,QAArB7B,EAAE,SAAS6B,OAEX7B,EAAE,iBAAiB8B,KAAK,YAAY,GACpC9B,EAAE,UAAU6B,IAAI,KAGhB7B,EAAE,iBAAiB8B,KAAK,YAAY,YASnCC,oBACDC,mBAAqBhC,EAAE,oBAAoB6B,MAC3CI,gBAAkBC,SAASF,mBAAoB,YAE/C3B,UAAY,MAGZA,SAAW4B,0BAmIVE,gBAAgBC,YAEG,IADZ,gBACFC,KAAKD,cAwEVE,2BAEmB,KA9CpBC,QAAUvC,EAAE,SAAS6B,MACrBW,QAAUxC,EAAE,SAAS6B,MACrBY,QAAUzC,EAAE,gBAAgB6B,MAE5Ba,MAAO,GAEsB,IAA7BP,gBAAgBI,WAChBI,QAAQ,CAAC,aAAa,SAASP,SACvBQ,QAAUR,IAAIS,WAAW,aAAc,kBAAmB,MAC9D7C,EAAE8C,KAAKF,SAASG,MAAK,SAASC,iBAC1B3B,OAAO4B,MAAMD,uBAGrBN,MAAO,GAGsB,KA7BT,IADZ,mCACFL,KA6BUG,YAChBG,QAAQ,CAAC,aAAa,SAASP,SACvBQ,QAAUR,IAAIS,WAAW,aAAc,kBAAmB,MAC9D7C,EAAE8C,KAAKF,SAASG,MAAK,SAASC,iBAC1B3B,OAAO4B,MAAMD,uBAGrBN,MAAO,IAGsB,IAA7BP,gBAAgBM,WAChBE,QAAQ,CAAC,aAAa,SAASP,SACvBQ,QAAUR,IAAIS,WAAW,aAAc,kBAAmB,MAC9D7C,EAAE8C,KAAKF,SAASG,MAAK,SAASC,iBAC1B3B,OAAO4B,MAAMD,uBAGrBN,MAAO,GAGJA,SAaiB,IAApBX,iBACAY,QAAQ,CAAC,aAAa,SAASP,SACvBQ,QAAUR,IAAIS,WAAW,iBAAkB,kBAAmB,MAClE7C,EAAE8C,KAAKF,SAASG,MAAK,SAASC,iBAC1B3B,OAAO4B,MAAMD,wBAGd,IAGXhD,EAAE,iBAAiB8B,KAAK,YAAY,GA+MhCoB,WAAalD,EAAE,gBAAgB6B,MAC/BsB,GAAKnD,EAAE,OAAO6B,eA+DKqB,WAAYC,QAC/BC,cACAC,SAEAC,KAAOtD,EAAE,aAAa8B,KAAK,SAAS,GAExCzB,SAAW6B,SAASqB,UAAUD,KAAKE,WAE/BC,SAAW,CACXC,KAAM,MACNC,OAAO,EACPC,OAAO,EACPC,aAAa,EACbC,cAAe,QACfC,SAAU,OAGVC,WAAad,WAAa,6CAA+CC,GAI7Ea,YADAA,YADAA,YADAA,YAA0B,8CACA,wBAA0BT,UAAUnD,WACpC,yBAA2BC,UAC3B,6BAA+BE,mBAGzDP,EAAEiE,KACED,WAAYP,UAEfV,MAAK,SAASmB,YAEK,OAAZA,WAQAb,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,UAEqD,KAApBd,SAASe,UAOjEf,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,YAEqD,KAApBd,SAASe,YAKjEC,kBAAoBhB,SAASe,OAC7BC,mBAAqBlD,4BAOrBkC,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,QAEqD,KAApBd,SAASe,QAIrEhB,cAAgBC,SAASe,OAEzBE,YAAW,qBAoBOpB,WAAYC,GAAIC,mBAClCC,SACAkB,YACAC,QAAU,GACVC,UAAY,GACZC,UAAY,GACZC,iBAAmB,GACnBC,eAAiB,GAEjBrC,QAAUvC,EAAE,SAAS6B,MACrBW,QAAUxC,EAAE,SAAS6B,MACrBY,QAAUzC,EAAE,gBAAgB6B,MAC5BgD,UAAY7E,EAAE,cAAc6B,MAC5BiD,UAAY9E,EAAE,cAAc6B,MAEhCU,QAAUA,QAAQwC,OAClBvC,QAAUA,QAAQuC,OACF,OAAZtC,UACAA,QAAUA,QAAQsC,YAGlBC,GAAK,IAAIC,SAGbD,GAAGE,OAAO,SAAU,OACpBF,GAAGE,OAAO,KAAM/B,IAChB6B,GAAGE,OAAO,mBAAoB,yBAE1BxB,KAAO1D,EAAE,SAAS6B,MAClBsD,UAAY,GAGZA,UADQ,SAARzB,KACYpD,iBACG,SAARoD,KACKpD,iBAEAA,iBAGhB0E,GAAGE,OAAO,kBAAmBC,WAC7BH,GAAGE,OAAO,mBAAoB,GAC9BF,GAAGE,OAAO,aAAc3C,SACxByC,GAAGE,OAAO,aAAc1C,SACR,OAAZC,SAAgC,KAAZA,QACpBuC,GAAGE,OAAO,oBAAqBzC,SAE/BuC,GAAGE,OAAO,oBAAqB,IAGnCF,GAAGE,OAAO,mBAAoBlF,EAAE,eAAe6B,OAE7B,OAAdgD,WAAoC,KAAdA,WACtBG,GAAGE,OAAO,wBAAyBL,WAGvCG,GAAGE,OAAO,kBAAmBJ,WAC7BE,GAAGE,OAAO,eAAgBJ,eAGtBrB,SAAW,CACXC,KAAM,OACN0B,KAAMJ,GACNrB,OAAO,EACPC,OAAO,EACPC,aAAa,EACbC,cAAe,QACfuB,aAAa,EACbtB,SAAU,OAGVC,WAAad,WAAa,mCAG9BlD,EAAEiE,KACED,WAAYP,UAEfV,MAAK,SAASmB,gBAEPA,MAAAA,SACAoB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,gEAOlBlC,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,UAEqD,KAApBd,SAASe,QACjEkB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,mCAAqClC,SAASe,OAAS,MAOzEf,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,YAEqD,KAApBd,SAASe,QACjEkB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,sEAKtBhB,YAAclB,SAASe,SAEJ5D,aAAaU,kBAC5BoE,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,oDAAsDhB,YAAc,OAK1FlB,SAAWrD,EAAEkE,SAASC,KAAK,MAE3BK,QAAUnB,SAASe,OAEnBf,SAAWrD,EAAEkE,SAASC,KAAK,QAE3BM,UAAYpB,SAASe,OAErBf,SAAWrD,EAAEkE,SAASC,KAAK,QAE3BO,UAAYrB,SAASe,OAErBf,SAAWrD,EAAEkE,SAASC,KAAK,eAIvBQ,iBAFAtB,MAAAA,UAA4E,KAApBA,SAASe,OAE9Cf,SAASe,OAET,GAGvBf,SAAWrD,EAAEkE,SAASC,KAAK,aAE3BS,eAAiBvB,SAASe,OAEV,OAAZI,SAAgC,KAAZA,SAAgC,OAAdC,WAAoC,KAAdA,WAC9C,OAAdC,WAAoC,KAAdA,WAAuC,OAAnBE,gBAA8C,KAAnBA,gBACzD,KAAZnC,UAAwC,OAArBkC,kBAAkD,KAArBA,mBAChDW,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,gDAKtBjB,YAAW,qBAuBMpB,WAAYC,GAAIC,cAAeoB,aAChDnB,SACA2B,GAAK,IAAIC,SAEbtC,QAAQ,CAAC,WAAY,sBAAsB,SAASP,IAAKoD,kBACjDC,QAAU,CACV,CAACC,IAAK,qBAAsBC,UAAW,mBACvC,CAACD,IAAK,WAAYC,UAAW,mBAC7B,CAACD,IAAK,cAAeC,UAAW,oBAEpCvD,IAAIwD,YAAYH,SAASI,MAAK,SAASC,SAEnCd,GAAGE,OAAO,SAAU,UACpBF,GAAGE,OAAO,KAAM/B,IAChB6B,GAAGE,OAAO,gBAAiB9B,eAC3B4B,GAAGE,OAAO,WAAYlF,EAAE,0BAA0B8B,KAAK,SAAS,GAAIyB,UAAUnD,UAAWC,UACzF2E,GAAGE,OAAO,UAAU,GACpBF,GAAGE,OAAO,cAAc,GACxBF,GAAGE,OAAO,WAAY,OAGlBzB,SAAW,CACXC,KAAM,OACN0B,KAAMJ,GACNrB,OAAO,EACPC,OAAO,EACPC,aAAa,EACbC,cAAe,QACfuB,aAAa,EACbtB,SAAU,MACVgC,IAAK,eACGC,IAAMhG,EAAEiG,aAAaF,aACrBC,IAAIE,QACJF,IAAIE,OAAOC,iBAAiB,YAAY,SAASC,OACzCC,SAAWnE,SAASkE,EAAEE,OAASF,EAAEG,MAAQ,KAC7CvG,EAAE,WAAWwG,KAAKtE,SAASmE,cAC5B,GAEAL,MAIfhG,EAAE,gBAAgBwG,KAAK,IAEvBxG,EAAE,gBAAgBkF,OAAOY,QAAQ,GAAK,YAElClD,QAAU,MAAQkD,QAAQ,GAC9BlD,SAAoB,8DAEpB5C,EAAE,gBAAgBkF,OAAOtC,aAErBoB,WAAad,WAAa,mDAG9BlD,EAAEiE,KACED,WAAYP,UAEfV,MAAK,SAASmB,YAEK,OAAZA,eACAoB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,gEAOlBlC,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,UAEqD,KAApBd,SAASe,cACjEkB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,iCAAmClC,SAASe,OAAS,QAOvEf,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,YAEqD,KAApBd,SAASe,cACjEkB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,uEAIlBlB,kBAAoBhB,SAASe,UAC7BC,mBAAqBlD,iCACrBkD,mBAAqBlD,0CACrBmE,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,uDAAyDlB,kBAAoB,KAG/FhD,OAAOoF,QAAQC,IAAI,qCAGvB1G,EAAE,gBAAgBkF,OAAOY,QAAQ,GAAK,QAGtCxB,YAAW,qBA0BCpB,WAAYC,GAAIC,cAAeoB,aACnDD,YAMAlB,SALAoB,UAAY,GACZC,UAAY,GACZC,iBAAmB,GACnBC,eAAiB,GAKjBI,GAAK,IAAIC,SACbD,GAAGE,OAAO,SAAU,cACpBF,GAAGE,OAAO,KAAM/B,IAChB6B,GAAGE,OAAO,UAAWV,SACrBQ,GAAGE,OAAO,sBAAuB,oCACjCF,GAAGE,OAAO,iBAAkB9B,mBAGxBK,SAAW,CACXC,KAAM,OACN0B,KAAMJ,GACNrB,OAAO,EACPC,OAAO,EACPC,aAAa,EACbC,cAAe,QACfuB,aAAa,EACbtB,SAAU,OAGVC,WAAad,WAAa,0CAG9BlD,EAAEiE,KACED,WAAYP,UAEfV,MAAK,SAASmB,gBAEPA,MAAAA,SACAoB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,kEAOlBlC,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,UAEqD,KAApBd,SAASe,QACjEkB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,qCAAuClC,SAASe,OAAS,MAO3Ef,OAFJA,SAAWrD,EAAEkE,SAASC,KAAK,YAEqD,KAApBd,SAASe,QACjEkB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,uEAKtBhB,YAAclB,SAASe,SAEJ5D,aAAaK,aAAe0D,aAAe/D,aAAaO,eACvEwD,aAAe/D,aAAaI,kBAAoB2D,aAAe/D,aAAamG,QAC5EpC,aAAe/D,aAAaoG,WAC5BtB,kBAAkBpC,WAAYC,GAAIC,oBAClCmC,kBAAkB,uDAAyDhB,YAAc,OAK7FlB,SAAWrD,EAAEkE,SAASC,KAAK,MAE3BK,QAAUnB,SAASe,OAEnBf,SAAWrD,EAAEkE,SAASC,KAAK,QAE3BM,UAAYpB,SAASe,OAErBf,SAAWrD,EAAEkE,SAASC,KAAK,QAE3BO,UAAYrB,SAASe,OAErBf,SAAWrD,EAAEkE,SAASC,KAAK,eAIvBQ,iBAFAtB,MAAAA,UAA4E,KAApBA,SAASe,OAE9Cf,SAASe,OAET,GAGvBf,SAAWrD,EAAEkE,SAASC,KAAK,aAE3BS,eAAiBvB,SAASe,gBAxqBLyC,GAAIC,KAAMC,KAAMC,YAAalC,eAClDmC,OAAS,2CAEbA,QAAU,qCACVA,QAAU,4BAA8BJ,GAAK,aAC7CI,QAAU,wBAA0BH,KAAO,aAC3CG,QAAU,wBAA0BF,KAAO,aAC3CE,QAAU,+BAAiCD,YAAc,aACzDC,QAAU,8BAAgCnC,UAAY,aACtDmC,QAAU,WACVA,QAAU,OACVA,QAAU,6EAEVjH,EAAE,gBAAgBwG,KAAKS,QAEvBjH,EAAE,kBAAkBkH,GAAG,SAAS,WAC5B9F,2BAGJuB,QAAQ,CAAC,WAAY,sBAAsB,SAASP,IAAKoD,kBACjDC,QAAU,CACV,CAACC,IAAK,iBAAkBC,UAAW,mBACnC,CAACD,IAAK,iBAAkBC,UAAW,mBACnC,CAACD,IAAK,cAAeC,UAAW,mBAChC,CAACD,IAAK,cAAeC,UAAW,mBAChC,CAACD,IAAK,cAAeC,UAAW,mBAChC,CAACD,IAAK,mBAAoBC,UAAW,mBACrC,CAACD,IAAK,aAAcC,UAAW,oBAEnCvD,IAAIwD,YAAYH,SAASI,MAAK,SAASC,aAC/BmB,OAAS,OAASnB,QAAQ,GAAK,eACnCmB,QAAU,qCACVA,QAAU,WAAanB,QAAQ,GAAK,YAAce,GAAK,aACvDI,QAAU,WAAanB,QAAQ,GAAK,YAAcgB,KAAO,aACzDG,QAAU,WAAanB,QAAQ,GAAK,YAAciB,KAAO,aACzDE,QAAU,WAAanB,QAAQ,GAAK,YAAckB,YAAc,aAChEC,QAAU,WAAanB,QAAQ,GAAK,YAAchB,UAAY,aAC9DmC,QAAU,WACVA,QAAU,OACVA,QAAU,qEACVA,QAAUnB,QAAQ,GAAK,OAEvB9F,EAAE,gBAAgBwG,KAAKS,QAEvBjH,EAAE,kBAAkBkH,GAAG,SAAS,WAC5B9F,2BAEG,KACR+F,KAAK3B,aAAa4B,cA2nBrBC,CAAoB7C,QAASC,UAAWC,UAAWC,iBAAkBC,8BA/mBhD1B,WAAY2D,GAAIC,KAAME,gBACpC,OAAPH,IAAsB,KAAPA,GAAW,CACf,OAAPA,IACA7G,EAAE,YAAauB,OAAOC,UAAUK,IAAIgF,QAGpCS,OAAStH,EAAE,WAAYuB,OAAOC,UAEnB,OAAX8F,QACAA,OAAOzF,IAAIiF,MAGK,OAAhBE,cACAA,YAAcA,YAAYO,QAAQ,MAAO,WAG7CP,YAAc,MAAQA,YAAc,iBAEhCQ,OAASxH,EAAE,0BAA2BuB,OAAOC,UAElC,OAAXgG,SACoB,OAAhBR,aAAwC,KAAhBA,YACxBQ,OAAOhB,KAAKQ,aAEZQ,OAAOhB,KAAK,KAML,QAFfgB,OAASxH,EAAE,kBAAmBuB,OAAOC,aAGb,OAAhBwF,aAAwC,KAAhBA,YACxBQ,OAAOhB,KAAKQ,aAEZQ,OAAOhB,KAAK,SAIhBiB,UAAYzH,EAAE,cAAeuB,OAAOC,UAAUK,MAE9C6F,OAASxE,WAAa,MAAQuE,UAAY,OAASA,UAAY,yBAA2BZ,GAC9Fa,QAAkB,mCAEdC,iBAAmB3H,EAAE,mBAAoBuB,OAAOC,UAC3B,OAArBmG,mBACAA,iBAAiB7F,KAAK,MAAO4F,QAC7BC,iBAAiB7F,KAAK,MAAOgF,MAC7Ba,iBAAiB7F,KAAK,QAASgF,WAG/Bc,kBAAoB5H,EAAE,uBAAwBuB,OAAOC,UAC/B,OAAtBoG,mBACAA,kBAAkBC,IAAI,CAACC,WAAY,gBAGnCC,YAAc/H,EAAE,gBAAiBuB,OAAOC,UACxB,OAAhBuG,aACAA,YAAYjG,KAAK,YAAY,IAwjBjCkG,CAAoB9E,WAAYsB,QAASC,UAAWE,sBAGvDwC,MAAK,SAASjD,SACK,OAAZA,SACA7C,OAAOoF,QAAQwB,IAAI/D,SAEvBoB,kBAAkBpC,WAAYC,GAAIC,eAClCmC,kBAAkB,2EAtIN2C,CAAmBhF,WAAYC,GAAIC,cAAeoB,WACnD,QAGN2C,MAAK,SAASjD,SACK,OAAZA,SACA7C,OAAOoF,QAAQwB,IAAI/D,SAEvBoB,kBAAkBpC,WAAYC,GAAIC,eAClCmC,kBAAkB,uEAGf,KACR4B,KAAK3B,aAAa4B,cApIjBe,CAAgBjF,WAAYC,GAAIC,cAAeoB,WAChD,QAGN2C,MAAK,SAASjD,SACK,OAAZA,SACA7C,OAAOoF,QAAQwB,IAAI/D,SAEvBoB,kBAAkBpC,WAAYC,GAAIC,eAClCmC,kBAAkB,yEA/Kd6C,CAAiBlF,WAAYC,GAAIC,iBAClC,KAPCmC,kBAAkB,kEAPlBA,kBAAkB,0DAA4DlB,kBAAoB,UANlGkB,kBAAkB,6EAPlBA,kBAAkB,oCAAsClC,SAASe,OAAS,UAR1EmB,kBAAkB,mEAsCzB4B,MAAK,SAASjD,SACK,OAAZA,SACA7C,OAAOoF,QAAQwB,IAAI/D,SAEvBqB,kBAAkB,0EArItB8C,CAAkBnF,WAAYC,KA/MvB,QA9DHZ,QACAC,QACAC,QAEAC,KAsQAQ,WACAC,YArKCoC,kBAAkB+C,aAAcnF,GAAIC,eAC9B,KAAPD,IAA+B,KAAlBC,eACbkC,oBAEJtF,EAAE,gBAAgBwG,KAAK,IACvBxG,EAAE,gBAAgBkF,OAAO,qBAAyBoD,aAAe,eA4IjE3F,QAAQ,CAAC,aAAa,SAASP,SACvBQ,QAAUR,IAAIS,WAAW,aAAc,kBAAmB,MAC9D7C,EAAE8C,KAAKF,SAASG,MAAK,SAASC,qBACtBuF,YAAc,yEAClBA,aAAevF,gBAAkB,OACjChD,EAAE,gBAAgBkF,OAAOqD,aAEzBvI,EAAE,kBAAkBkH,GAAG,SAAS,WAC5B9F,0CAyBPkE,kBAAkBpC,WAAYC,GAAIC,mBAEnCV,KADAsC,GAAK,IAAIC,SAIbD,GAAGE,OAAO,SAAU,UACpBF,GAAGE,OAAO,KAAM/B,IAChB6B,GAAGE,OAAO,gBAAiB9B,mBAGvBK,SAAW,CACXC,KAAM,OACN0B,KAAMJ,GACNrB,OAAO,EACPE,aAAa,EACbC,cAAe,QACfuB,aAAa,EACbzB,OAAO,EACPG,SAAU,OAGVC,WAAad,WAAa,mDAG9BlD,EAAEiE,KACED,WAAYP,UAEfV,MAAK,SAASmB,SAEK,OAAZA,UACAxB,MAAO,GAEXA,MAAO,KAEVyE,MAAK,SAASjD,SACXxB,MAAO,EACS,OAAZwB,SACA7C,OAAOoF,QAAQwB,IAAI/D,YAIpBxB,KAkfX1C,EAAEqB,QAAQ6F,GAAG,UAAU,WACnBvF,eAIJ3B,EAAEqB,QAAQ6F,GAAG,UAAU,eAjvBflD,WAAAA,WADahE,EAAE,gBAAgB6B,MACL,qCAG9B7B,EAAEiE,KAAK,CACHP,KAAM,MACN8E,IAAKxE,WACLL,OAAO,IAEVZ,MAAK,SAASmB,SAEK,OAAZA,QACA7C,OAAOoF,QAAQC,IAAI,gEAEnBrF,OAAOoF,QAAQC,IAAI,wCAG1BS,MAAK,SAASjD,SACX7C,OAAOoF,QAAQC,IAAI,uEACH,OAAZxC,SACA7C,OAAOoF,QAAQwB,IAAI/D,eAmuB/BlE,EAAEqB,QAAQoH,QAhiCoBvI,aAgiCQ,qBA/hCpB,IAAVC,OACAuI,aAAavI,YAEjBA,MAAQmE,YAAW,eAEXqE,EAAI3I,EAAEqB,QAAQuH,QACdC,EAAI7I,EAAEqB,QAAQyH,SAGdC,GAAK/I,EAAEE,cAAc8I,aACrBC,GAAKjJ,EAAEE,cAAcgJ,cAGzBlJ,EAAEE,cAAc2H,IAAI,OAAWc,EAAII,IAAM,EAAK,UAAeF,EAAII,IAAM,EAAK,SAC7E,QAmhCPjJ,EAAE,aAAakH,GAAG,UAAU,2BAp9BLiC,SA+BfC,UAAY,MAGZpJ,EAAE,aAAc,KAEZsD,KAAOtD,EAAE,aAAa8B,KAAK,SAAS,GAExCzB,SAAW6B,SAASoB,KAAKE,UACrB6F,YAtC8B,IADnBF,SAuCgB5F,UAAUD,KAAKI,OAtCrC4F,QAAQ,eAA8D,GAAxCH,SAASG,QAAQ,qBACrB,GAAnCH,SAASG,QAAQ,gBAAyD,GAAlCH,SAASG,QAAQ,eACvB,GAAlCH,SAASG,QAAQ,eAAwD,GAAlCH,SAASG,QAAQ,eAChB,GAAxCH,SAASG,QAAQ,qBAA8D,GAAlCH,SAASG,QAAQ,eAC1B,GAApCH,SAASG,QAAQ,iBAA4D,GAApCH,SAASG,QAAQ,iBACjB,GAAzCH,SAASG,QAAQ,sBACsB,GAAvCH,SAASG,QAAQ,oBAA8D,GAAnCH,SAASG,QAAQ,cACtD,SAG2B,GAAlCH,SAASG,QAAQ,eAAwD,GAAlCH,SAASG,QAAQ,eACrB,GAAnCH,SAASG,QAAQ,gBAAyD,GAAlCH,SAASG,QAAQ,eACvB,GAAlCH,SAASG,QAAQ,eACiB,GAAlCH,SAASG,QAAQ,eAA6D,GAAvCH,SAASG,QAAQ,kBACjD,SAG2B,GAAlCH,SAASG,QAAQ,eAAyD,GAAnCH,SAASG,QAAQ,gBACtB,GAAlCH,SAASG,QAAQ,eAAyD,GAAnCH,SAASG,QAAQ,cACjD,QAGJ,MAiBCC,WAAaxH,gBAEjBY,QAAQ,CAAC,WAAY,sBAAsB,SAASP,IAAKoD,cAOrDpD,IAAIwD,YANU,CACV,CAACF,IAAK,iBAAkBC,UAAW,mBACnC,CAACD,IAAK,uBAAwBC,UAAW,mBACzC,CAACD,IAAK,WAAYC,UAAW,mBAC7B,CAACD,IAAK,WAAYC,UAAW,qBAERE,MAAK,SAASC,aAEhB,IAAfyD,aACAH,WAAatD,QAAQ,IAGP,OAAduD,aACAD,WAAatD,QAAQ,IAIP,KAAdsD,UACA/H,OAAO4B,MAAMmG,WACbpJ,EAAE,cAAcwG,KAAK,IACrBxG,EAAE,SAAS6B,IAAI,IACf7B,EAAE,SAAS6B,IAAI,IACf7B,EAAE,gBAAgB6B,IAAI,IACtB7B,EAAE,SAAS6B,IAAI,IACf7B,EAAE,aAAa6B,IAAI,QAChB,KACC2H,SAAW,GACXC,QAAU,GAGdrJ,SAAWkD,KAAKwD,KAIZ2C,QAFApJ,SAAW,YACGA,qBACQqJ,QAAQ,GAAK,KAC5BrJ,SAAW,SACJA,kBACQqJ,QAAQ,GAAK,KAC5BrJ,SAAW,MACJA,SAAW,MACHqJ,QAAQ,GAAK,KAEzBrJ,SAAW,IAGzBmJ,UAAY,2BACZA,UAAY1D,QAAQ,GAAK,KAAO2D,QAAU,YAC1CD,UAAY1D,QAAQ,GAAK,IAAMvC,UAAUD,KAAKI,MAAQ,OACtD8F,UAAY,aAEZxJ,EAAE,cAAcwG,KAAKgD,UACrBxJ,EAAE,SAAS6B,IAAIzB,UACfJ,EAAE,SAAS6B,IAAIwH,mBAEnB1H,YACO,KACRwF,KAAK3B,aAAa4B,eAk3B7BuC,MAGJ3J,EAAE,SAASkH,GAAG,UAAU,WACpBvF,eAGJ3B,EAAE,SAASkH,GAAG,UAAU,WACpBvF,eAGJ3B,EAAE,iBAAiBkH,GAAG,SAAS,WAC3B5E,uBAGJtC,EAAE,oBAAoBkH,GAAG,SAAS,WAC9B9F,2BAGJpB,EAAE,gBAAgBkH,GAAG,SAAS,WA33B1BlH,EAAE,cAAcwG,KAAK,IACrBxG,EAAE,SAAS6B,IAAI,OA83BnB7B,EAAE,YAAYkH,GAAG,SAAS,WACtB9F"}