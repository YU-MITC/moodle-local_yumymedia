{"version":3,"file":"simpleuploader.min.js","sources":["../src/simpleuploader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * YU Kaltura \"My Media\" script for simple uploader.\n *\n * @copyright (C) 2016-2025 Yamaguchi University (gh-cc@mlex.cc.yamaguchi-u.ac.jp)\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module local_yumymedia/simpleuploader\n */\n\ndefine(['jquery'], function($) {\n\n    return {\n        /**\n         * Initial function.\n         * @access public\n         */\n        init: function() {\n\n            var modalX = 0;\n            var modalY = 0;\n\n            var fileName = \"\";\n            var fileSize = 0;\n\n            var MEDIA_TYPE = {\n                VIDEO: 1,\n                IMAGE: 2,\n                AUDIO: 5\n            };\n\n            var AUTO_FINALIZE = {\n                TRUE: 1,\n                FALSE: 0,\n                NULL: -1\n            };\n\n            var ENTRY_STATUS = {\n                ENTRY_IMPORTING: -2,\n                ENTRY_CONVERTING: -1,\n                ENTRY_IMPORT: 0,\n                ENTRY_PRECONVERT: 1,\n                ENTRY_READY: 2,\n                ENTRY_DELETED: 3,\n                ENTRY_PENDING: 4,\n                ENTRY_MODERATE: 5,\n                ENTRY_BLOCKED: 6,\n                ENTRY_NO_CONTENT: 7\n            };\n\n            var UPLOAD_TOKEN_STATUS = {\n                PENDING: 0,\n                PARTIAL_UPLOAD: 1,\n                FULL_UPLOAD: 2,\n                CLOSED: 3,\n                TIMED_OUT: 4,\n                DELETED: 5\n            };\n\n            /**\n             * This function centerizes a modal window.\n             */\n            function centeringModalSyncer() {\n\n                // Get width and height of window.\n                var w = $(window).width();\n                var h = $(window).height();\n\n                // Get width and height of modal_content.\n                var cw = $(\"#modal_content\").outerWidth();\n                var ch = $(\"#modal_content\").outerHeight();\n\n                // Execute centerize.\n                $(\"#modal_content\").css({\"left\": ((w - cw) / 2) + \"px\", \"top\": ((h - ch) / 2) + \"px\"});\n            }\n\n            /**\n             * This function checks file size.\n             * @access public\n             * @return {bool} - The file can upload?\n             */\n            function checkFileSize() {\n                var maximumDataSizeStr = $(\"#maximumDataSize\").val();\n                var maximumDataSize = parseInt(maximumDataSizeStr, 10);\n\n                if (fileSize <= 0) {\n                    return false;\n                }\n                if (fileSize > maximumDataSize) {\n                    return false;\n                }\n                return true;\n            }\n\n            /**\n             * This function checks file type.\n             * @access public\n             * @param {string} fileType - file type of selected media.\n             * @return {string} - media type string for kaltura server.\n             */\n            function checkFileType(fileType) {\n                if (fileType.indexOf(\"video/avi\") != -1 || fileType.indexOf(\"video/x-msvideo\") != -1 ||\n                    fileType.indexOf(\"video/mpeg\") != -1 || fileType.indexOf(\"video/mpg\") != -1 ||\n                    fileType.indexOf(\"video/mp4\") != -1 || fileType.indexOf(\"video/ogg\") != -1 ||\n                    fileType.indexOf(\"video/quicktime\") != -1 || fileType.indexOf(\"video/VP8\") != -1 ||\n                    fileType.indexOf(\"video/x-flv\") != -1 || fileType.indexOf(\"video/x-f4v\") != -1 ||\n                    fileType.indexOf(\"video/x-matroska\") != -1 ||\n                    fileType.indexOf(\"video/x-ms-wmv\") != -1 || fileType.indexOf(\"video/webm\") != -1) {\n                    return \"video\";\n                }\n\n                if (fileType.indexOf(\"audio/ac3\") != -1 || fileType.indexOf(\"audio/ogg\") != -1 ||\n                    fileType.indexOf(\"audio/mpeg\") != -1 || fileType.indexOf(\"audio/mp4\") != -1 ||\n                    fileType.indexOf(\"audio/mp3\") != -1 ||\n                    fileType.indexOf(\"audio/wav\") != -1 || fileType.indexOf(\"audio/x-ms-wma\") != -1) {\n                    return \"audio\";\n                }\n\n                if (fileType.indexOf(\"image/gif\") != -1 || fileType.indexOf(\"image/jpeg\") != -1 ||\n                    fileType.indexOf(\"image/png\") != -1 || fileType.indexOf(\"image/tiff\") != -1) {\n                    return \"image\";\n                }\n\n                return \"N/A\";\n            }\n\n            /**\n             * This function checks metadata.\n             * @access public\n             */\n            function checkForm() {\n                if ($(\"#fileData\") === null ||\n                    $(\"#fileData\").files === null ||\n                    $(\"#name\").val() === \"\" ||\n                    $(\"#tags\").val() === \"\" ||\n                    $(\"#type\").val() === \"\" ||\n                    $(\"#type\").val() === \"N/A\") {\n                    // Dsiable upload button.\n                    $(\"#entry_submit\").prop(\"disabled\", true);\n                    $(\"#entry\").val(\"\");\n                } else {\n                    // Enable upload button.\n                    $(\"#entry_submit\").prop(\"disabled\", false);\n                }\n            }\n\n            /**\n             * This function is callback for cancel button.\n             * @access public\n             */\n            function handleCancelClick() {\n                location.href = \"./yumymedia.php\";\n            }\n\n            /**\n             * This function prints modal window.\n             * @access public\n             * @return {boole} - If modal window open, return true. Otherwise, return false.\n             */\n            function fadeInModalWindow() {\n                // Window Unfocus for avoid duplication.\n                $(this).blur();\n                if ($(\"#modal_window\")[0]) {\n                    return false;\n                }\n\n                // Records scroll position of window.\n                var dElm = document.documentElement;\n                var dBody = document.body;\n                modalX = dElm.scrollLeft || dBody.scrollLeft; // X position.\n                modalY = dElm.scrollTop || dBody.scrollTop; // Y position.\n                // Print overlay.\n                $(\"body\").append(\"<div id=\\\"modal_window\\\"></div>\");\n                $(\"#modal_window\").fadeIn(\"slow\");\n\n                // Execure centerrize.\n                centeringModalSyncer();\n                // Fade-in modal window.\n                $(\"#modal_content\").fadeIn(\"slow\");\n\n                return true;\n            }\n\n            /**\n             * This function deletes a modal window.\n             * @access public\n             */\n            function fadeOutModalWindow() {\n                // Rescore scroll position of window.\n                window.scrollTo(modalX, modalY);\n                // Fade-out [#modal_content] and [#modal_window].\n                $(\"#modal_content,#modal_window\").fadeOut(\"slow\", function() {\n                    // Delete [#modal_window].\n                    $(\"#modal_window\").remove();\n                    $(\"#modal_content\").remove();\n                });\n            }\n\n            /**\n             * This function adds back button.\n             * @access public\n             */\n            function addBackButton() {\n                require(['core/str'], function(str) {\n                    var message = str.get_string('back_label', 'local_yumymedia', null);\n                    $.when(message).done(function(localizedString) {\n                        var contentHtml = \"<br><input type=button id=\\\"backToMymedia\\\" name=\\\"backToMymedia\\\" value=\\\"\";\n                        contentHtml += localizedString + \"\\\" />\";\n                        $(\"#modal_content\").append(contentHtml);\n\n                        $(\"#backToMymedia\").on(\"click\", function() {\n                            handleCancelClick();\n                        });\n                    });\n                });\n            }\n\n            /**\n             * This function prints error message.\n             * @access public\n             * @param {string} errorMessage - string of error message.\n             * @param {string} ks - session string of kaltura connecion;\n             * @param {string} uploadTokenId - upload token id.\n             */\n            function printErrorMessage(errorMessage, ks, uploadTokenId) {\n                if (ks !== \"\" && uploadTokenId !== \"\") {\n                    deleteUploadToken();\n                }\n                $(\"#modal_content\").append(\"<font color=\\\"red\\\">\" + errorMessage + \"</font><br>\");\n                addBackButton();\n            }\n\n            /**\n             * This function prints success message.\n             * @access public\n             * @param {string} id - id of media entry.\n             * @param {string} name - name of media entry.\n             * @param {string} tags - tags of media entry.\n             * @param {string} description - description of media entry.\n             * @param {string} creatorId - username of creator.\n             */\n            function printSuccessMessage(id, name, tags, description, creatorId) {\n\n                require(['core/str', 'core/notification'], function(str, notification) {\n                    var strings = [\n                        {key: 'upload_success', component: 'local_yumymedia'},\n                        {key: 'entryid_header', component: 'local_yumymedia'},\n                        {key: 'name_header', component: 'local_yumymedia'},\n                        {key: 'tags_header', component: 'local_yumymedia'},\n                        {key: 'desc_header', component: 'local_yumymedia'},\n                        {key: 'creatorid_header', component: 'local_yumymedia'},\n                        {key: 'back_label', component: 'local_yumymedia'}\n                    ];\n                    str.get_strings(strings).then(function(results) {\n                        // Delete modal window.\n                        fadeOutModalWindow();\n\n                        var output = '<h3>' + results[0] + '</h3>';\n                        output += \"<table border=\\\"2\\\" cellpadding=\\\"5\\\">\";\n                        output += \"<tr><td>\" + results[1] + \"</td><td>\" + id + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[2] + \"</td><td>\" + name + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[3] + \"</td><td>\" + tags + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[4] + \"</td><td>\" + description + \"</td></tr>\";\n                        output += \"<tr><td>\" + results[5] + \"</td><td>\" + creatorId + \"</td></tr>\";\n                        output += \"</table>\";\n                        output += \"<br>\";\n                        output += \"<input type=button id=\\\"backToMymedia\\\" name=\\\"backToMymedia\\\" value=\\\"\";\n                        output += results[6] + \"\\\" />\";\n                        $(\"#upload_info\").html(output);\n                        $(\"#backToMymedia\").on(\"click\", function() {\n                            handleCancelClick();\n                        });\n                        return 0;\n                    }).fail(notification.exception);\n                });\n            }\n\n            /**\n             * This function is callback for reset button.\n             * @access public\n             */\n            function handleResetClick() {\n                $(\"#file_info\").html(\"\");\n                $(\"#type\").val(\"\");\n            }\n\n            /**\n             * This function checks name of media.\n             * @access public\n             * @param {string} str - name of media.\n             * @return {bool} - if name is appropriate, return \"true\". Otherwise, return \"false\".\n             */\n            function checkNameString(str) {\n                var regex = /[\"$%&'~^\\\\`/]/;\n                if (regex.test(str) === true) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n\n            /**\n             * This function checks tags of media.\n             * @access public\n             * @param {string} str - tagas of media.\n             * @return {bool} - if tags are appropriate, return \"true\". Otherwise, return \"false\".\n             */\n            function checkTagsString(str) {\n                var regex = /[!\"#$%&'~|^\\\\@`()[\\]{}:;+*/=<>?]/;\n                if (regex.test(str) === true) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n\n            /**\n             * This function checks metadata of media.\n             * @access public\n             * @return {bool} - if metadata is appropriate, return \"true\". Otherwise, return \"false\".\n             */\n            function checkMetadata() {\n                var nameStr = $(\"#name\").val();\n                var tagsStr = $(\"#tags\").val();\n                var descStr = $(\"#description\").val();\n\n                var flag = true;\n\n                if (checkNameString(nameStr) === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_name', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    flag = false;\n                }\n\n                if (checkTagsString(tagsStr) === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_tags', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    flag = false;\n                }\n\n                if (checkNameString(descStr) === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_desc', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    flag = false;\n                }\n\n                return flag;\n            }\n\n            /**\n             * This function is callback for submit button.\n             * @access public\n             * @return {bool} - if file is uploaded, return true. Otherwise, return false.\n             */\n            function handleSubmitClick() {\n                var flag = true;\n\n                if (checkMetadata() === false) {\n                    flag = false;\n                } else if (checkFileSize() === false) {\n                    require(['core/str'], function(str) {\n                        var message = str.get_string('wrong_filesize', 'local_yumymedia', null);\n                        $.when(message).done(function(localizedString) {\n                            window.alert(localizedString);\n                        });\n                    });\n                    flag = false;\n                } else {\n                    $(\"#entry_submit\").prop(\"disabled\", true);\n                    fadeInModalWindow(); // Prints modal window.\n                    executeUploadProcess(); // Executes upload.\n                    flag = true;\n                }\n\n                return flag;\n            }\n\n            /**\n             * This function executes upload process.\n             * @access public\n             */\n            function executeUploadProcess() {\n                var serverHost = $(\"#kalturahost\").val(); // Get hostname of kaltura server.\n                var ks = $(\"#ks\").val(); // Get session id.\n                // Create upload token.\n                createUploadToken(serverHost, ks);\n            }\n\n            /**\n             * This function deletes upload token.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             * @param {string} uploadTokenId - token id for uploading.\n             * @return {bool} if upload token is deleted, return true.\n             */\n            function deleteUploadToken(serverHost, ks, uploadTokenId) {\n                var fd = new FormData();\n                var flag;\n\n                // Set form data.\n                fd.append(\"action\", \"delete\");\n                fd.append(\"ks\", ks);\n                fd.append(\"uploadTokenId\", uploadTokenId);\n\n                // Set transmission data.\n                var postData = {\n                    type: \"POST\",\n                    data: fd,\n                    cache: false,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    processData: false,\n                    async: true,\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/uploadToken/action/delete\";\n\n                // Transmits a data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // When response is not XML.\n                    if (xmlData === null) {\n                        flag = false;\n                    }\n                    flag = true;\n                })\n                .fail(function(xmlData) {\n                    flag = false;\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                });\n\n                return flag;\n            }\n\n            /**\n             * This function creates upload token.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             */\n            function createUploadToken(serverHost, ks) {\n                var uploadTokenId;\n                var findData;\n\n                var file = $(\"#fileData\").prop(\"files\")[0];\n\n                fileSize = parseInt(encodeURI(file.size));\n\n                var postData = {\n                    type: \"GET\",\n                    cache: false,\n                    async: true,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/uploadToken/action/add?ks=\" + ks;\n                serviceURL = serviceURL + \"&uploadToken:objectType=KalturaUploadToken\";\n                serviceURL = serviceURL + \"uploadToken:fileName=\" + encodeURI(fileName);\n                serviceURL = serviceURL + \"&uploadToken:fileSize=\" + fileSize;\n                serviceURL = serviceURL + \"&uploadToken:autoFinalize=\" + AUTO_FINALIZE.NULL;\n\n                // Transmits data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null) {\n                        printErrorMessage(\"Cannot create upload token !<br>(Cannot get a XML response.)\");\n                        return;\n                    }\n\n                    // Get a tag of error code.\n                    findData = $(xmlData).find(\"code\");\n                    // There exists error code.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        printErrorMessage(\"Cannot create upload token !<br>(\" + findData.text() + \")\");\n                        return;\n                    }\n\n                    findData = $(xmlData).find(\"status\");\n                    // There not exists upload token id.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        printErrorMessage(\"Cannot create upload token !<br>(Cannot get status of upload token.)\");\n                        return;\n                    }\n\n                    var uploadTokenStatus = findData.text();\n                    if (uploadTokenStatus != UPLOAD_TOKEN_STATUS.PENDING) {\n                        printErrorMessage(\"Cannot create upload token !<br>(UPLOAD_TOKEN_STATUS : \" + uploadTokenStatus + \")\");\n                        return;\n                    }\n                    // Get upload token id.\n                    findData = $(xmlData).find(\"id\");\n                    // There not exists upload token id.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        printErrorMessage(\"Cannot create uplaod token !<br>(Cannot get an uploadTokenId.)\");\n                        return;\n                    }\n                    uploadTokenId = findData.text();\n                    // Entry metadata.\n                    setTimeout(function() {\n                        createMediaEntry(serverHost, ks, uploadTokenId);\n                    }, 1000);\n\n                })\n                .fail(function(xmlData) {\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                    printErrorMessage(\"Cannot create upload token !<br>(Cannot connect to kaltura server.)\");\n                });\n            }\n\n            /**\n             * This function creates media entry.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connecion;\n             * @param {string} uploadTokenId - upload token id.\n             */\n            function createMediaEntry(serverHost, ks, uploadTokenId) {\n                var findData;\n                var entryStatus;\n                var entryId = \"\";\n                var entryName = \"\";\n                var entryTags = \"\";\n                var entryDescription = \"\";\n                var entryCreatorId = \"\";\n\n                var nameStr = $(\"#name\").val();\n                var tagsStr = $(\"#tags\").val();\n                var descStr = $(\"#description\").val();\n                var controlId = $(\"#controlId\").val();\n                var creatorId = $(\"#creatorId\").val();\n\n                nameStr = nameStr.trim();\n                tagsStr = tagsStr.trim();\n                if (descStr !== null) {\n                    descStr = descStr.trim();\n                }\n\n                var fd = new FormData();\n\n                // Creates form data.\n                fd.append(\"action\", \"add\");\n                fd.append(\"ks\", ks);\n                fd.append(\"entry:objectType\", \"KalturaMediaEntry\");\n\n                var type = $(\"#type\").val();\n                var mediaType = \"\";\n\n                if (type == \"image\") {\n                    mediaType = MEDIA_TYPE.IMAGE;\n                } else if (type == \"audio\") {\n                    mediaType = MEDIA_TYPE.AUDIO;\n                } else {\n                    mediaType = MEDIA_TYPE.VIDEO;\n                }\n\n                fd.append(\"entry:mediaType\", mediaType);\n                fd.append(\"entry:sourceType\", 1);\n                fd.append(\"entry:name\", nameStr);\n                fd.append(\"entry:tags\", tagsStr);\n                if (descStr !== null && descStr !== \"\") {\n                    fd.append(\"entry:description\", descStr);\n                } else {\n                    fd.append(\"entry:description\", \"\");\n                }\n\n                fd.append(\"entry:categories\", $(\"#categories\").val());\n\n                if (controlId !== null && controlId !== \"\") {\n                    fd.append(\"entry:accessControlId\", controlId);\n                }\n\n                fd.append(\"entry:creatorId\", creatorId);\n                fd.append(\"entry:userId\", creatorId);\n\n                // Creates transmission data.\n                var postData = {\n                    type: \"POST\",\n                    data: fd,\n                    cache: false,\n                    async: true,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    processData: false,\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/media/action/add\";\n\n                // Transmits data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null || typeof xmlData === \"undefined\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entry !<br>(Cannot get a XML response.)\");\n                        return;\n                    }\n\n                    // Get a tag of error code.\n                    findData = $(xmlData).find(\"code\");\n                    // There exists an error code.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entry !<br>(\" + findData.text() + \")\");\n                        return;\n                    }\n\n                    // Get a tag of status.\n                    findData = $(xmlData).find(\"status\");\n                    // There not exists a tag of status.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entyry !<br>(Cannot get a mediaEntryStatus.)\");\n                        return;\n                    }\n\n                    // Get a value of status.\n                    entryStatus = findData.text();\n                    // When uploading of metadata failed.\n                    if (entryStatus != ENTRY_STATUS.ENTRY_NO_CONTENT) {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot create media entry!<br>(mediaEntryStatus: \" + entryStatus + \")\");\n                        return;\n                    }\n\n                    // Get a tag of entry id.\n                    findData = $(xmlData).find(\"id\");\n                    // Get a value of entry id.\n                    entryId = findData.text();\n                    // Get a tag of name.\n                    findData = $(xmlData).find(\"name\");\n                    // Get a value of name.\n                    entryName = findData.text();\n                    // Get a tag of tags.\n                    findData = $(xmlData).find(\"tags\");\n                    // Get a value of tags.\n                    entryTags = findData.text();\n                    // Get a tag of description.\n                    findData = $(xmlData).find(\"description\");\n                    // There exists description.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        // Get a value of description.\n                        entryDescription = findData.text();\n                    } else {\n                        entryDescription = \"\";\n                    }\n                    // Get a tago of creator id.\n                    findData = $(xmlData).find(\"creatorId\");\n                    // Get a value of creator id.\n                    entryCreatorId = findData.text();\n\n                    if (entryId === null || entryId === \"\" || entryName === null || entryName === \"\" ||\n                        entryTags === null || entryTags === \"\" || entryCreatorId === null || entryCreatorId === \"\" ||\n                        descStr !== \"\" && (entryDescription === null || entryDescription === \"\")) {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"There exists wrong information(s) <br>\");\n                        return;\n                    }\n\n                    // Associate uploaded file with media entry.\n                    setTimeout(function() {\n                        uploadMediaFile(serverHost, ks, uploadTokenId, entryId);\n                    }, 1000);\n\n                })\n                .fail(function(xmlData) {\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                    deleteUploadToken(serverHost, ks, uploadTokenId);\n                    printErrorMessage(\"Cannot create media entry !<br>(Cannot connect to kaltura server.)\");\n                    return;\n                });\n            }\n\n            /**\n             * This function uploads media file.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             * @param {string} uploadTokenId - upload token id.\n             * @param {string} entryId - id of media entry.\n             */\n            function uploadMediaFile(serverHost, ks, uploadTokenId, entryId) {\n                var findData;\n                var fd = new FormData();\n\n                require(['core/str', 'core/notification'], function(str, notification) {\n                    var strings = [\n                        {key: 'uploader_uploading', component: 'local_yumymedia'},\n                        {key: 'progress', component: 'local_yumymedia'},\n                        {key: 'attach_file', component: 'local_yumymedia'}\n                    ];\n                    str.get_strings(strings).then(function(results) {\n                        $(\"#modal_content\").append(results[0] + \"<br>\");\n                        var message = \"<p>\" + results[1];\n                        message = message + \": <span id=\\\"pvalue\\\" style=\\\"color:#00b200\\\">0.00</span> %</p>\";\n                        $(\"#modal_content\").append(message);\n                        // Creates form data.\n                        fd.append(\"action\", \"upload\");\n                        fd.append(\"ks\", ks);\n                        fd.append(\"uploadTokenId\", uploadTokenId);\n                        fd.append(\"fileData\", $(\"input[name='fileData']\").prop(\"files\")[0], encodeURI(fileName), fileSize);\n                        fd.append(\"resume\", false);\n                        fd.append(\"finalChunk\", true);\n                        fd.append(\"resumeAt\", 0);\n\n                        // Creates tnramission data.\n                        var postData = {\n                            type: \"POST\",\n                            data: fd,\n                            cache: false,\n                            async: true,\n                            contentType: false,\n                            scriptCharset: \"utf-8\",\n                            processData: false,\n                            dataType: \"xml\",\n                            xhr: function() {\n                                var XHR = $.ajaxSettings.xhr();\n                                if (XHR.upload) {\n                                    XHR.upload.addEventListener(\"progress\", function(e) {\n                                        var newValue = parseInt(parseInt(e.loaded) / parseInt(e.total) * 10000) / 100;\n                                        $(\"#pvalue\").html(parseInt(newValue));\n                                    }, false);\n                                }\n                                return XHR;\n                            }\n                        };\n\n                        var serviceURL = serverHost + \"/api_v3/service/uploadToken/action/upload\";\n\n                        // Transmits data.\n                        $.ajax(\n                            serviceURL, postData\n                        )\n                        .done(function(xmlData) {\n                            // Response is not XML.\n                            if (xmlData === null) {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(Cannot get a XML response.)\");\n                                return;\n                            }\n\n                            // Get a tag of error code.\n                            findData = $(xmlData).find(\"code\");\n                            // There exists error code.\n                            if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(\" + findData.text() + \")\");\n                                return;\n                            }\n\n                            // Get upload token id.\n                            findData = $(xmlData).find(\"status\");\n                            // There not exists upload token id.\n                            if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(Cannot get an uploadTokenStatus.)\");\n                                return;\n                            }\n\n                            var uploadTokenStatus = findData.text();\n                            if (uploadTokenStatus != UPLOAD_TOKEN_STATUS.FULL_UPLOAD &&\n                                uploadTokenStatus != UPLOAD_TOKEN_STATUS.PARTIAL_UPLOAD) {\n                                deleteUploadToken(serverHost, ks, uploadTokenId);\n                                printErrorMessage(\"Cannot upload the video !<br>(UPLOAD_TOKEN_STATUS : \" + uploadTokenStatus + \")\");\n                                return;\n                            } else {\n                                window.console.log(\"File chunk have been transmitted.\");\n                            }\n\n                            $(\"#modal_content\").append(results[2] + \"<br>\");\n\n                            // Create media entry.\n                            setTimeout(function() {\n                                attachUploadedFile(serverHost, ks, uploadTokenId, entryId);\n                            }, 1000);\n\n                        })\n                        .fail(function(xmlData) {\n                            if (xmlData !== null) {\n                                window.console.dir(xmlData);\n                            }\n                            deleteUploadToken(serverHost, ks, uploadTokenId);\n                            printErrorMessage(\"Cannot upload the file !<br>(Cannot connect to contents server.)\");\n                            return;\n                        });\n                        return 0;\n                    }).fail(notification.exception);\n                });\n            }\n\n            /**\n             * This function uploads metadata.\n             * @access public\n             * @param {string} serverHost - hostname of kaltura server.\n             * @param {string} ks - session string of kaltura connection.\n             * @param {string} uploadTokenId - upload token id.\n             * @param {string} entryId - id of media entry.\n             */\n            function attachUploadedFile(serverHost, ks, uploadTokenId, entryId) {\n                var entryStatus;\n                var entryName = \"\";\n                var entryTags = \"\";\n                var entryDescription = \"\";\n                var entryCreatorId = \"\";\n\n                var findData;\n\n                // Creates form data.\n                var fd = new FormData();\n                fd.append(\"action\", \"addContent\");\n                fd.append(\"ks\", ks);\n                fd.append(\"entryId\", entryId);\n                fd.append(\"resource:objectType\", \"KalturaUploadedFileTokenResource\");\n                fd.append(\"resource:token\", uploadTokenId);\n\n                // Creates transmission data.\n                var postData = {\n                    type: \"POST\",\n                    data: fd,\n                    cache: false,\n                    async: true,\n                    contentType: false,\n                    scriptCharset: \"utf-8\",\n                    processData: false,\n                    dataType: \"xml\"\n                };\n\n                var serviceURL = serverHost + \"/api_v3/service/media/action/addContent\";\n\n                // Transmits data.\n                $.ajax(\n                    serviceURL, postData\n                )\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null || typeof xmlData === \"undefined\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(Cannot get a XML response.)\");\n                        return;\n                    }\n\n                    // Get a tag of error code.\n                    findData = $(xmlData).find(\"code\");\n                    // There exists error code.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(\" + findData.text() + \")\");\n                        return;\n                    }\n\n                    // Get a tag of status.\n                    findData = $(xmlData).find(\"status\");\n                    // There not exists a tag of status.\n                    if (findData === null || typeof findData === \"undefined\" || findData.text() === \"\") {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(Cannot get a mediaEntryStatus.)\");\n                        return;\n                    }\n\n                    // Get a value of status.\n                    entryStatus = findData.text();\n                    // When uploading of metadata failed.\n                    if (entryStatus != ENTRY_STATUS.ENTRY_READY && entryStatus != ENTRY_STATUS.ENTRY_PENDING &&\n                        entryStatus != ENTRY_STATUS.ENTRY_PRECONVERT && entryStatus != ENTRY_STATUS.IMPORT &&\n                        entryStatus != ENTRY_STATUS.IMPORTING) {\n                        deleteUploadToken(serverHost, ks, uploadTokenId);\n                        printErrorMessage(\"Cannot attach uploaded file !<br>(mediaEntryStatus: \" + entryStatus + \")\");\n                        return;\n                    }\n\n                    // Get a tag of entry id.\n                    findData = $(xmlData).find(\"id\");\n                    // Get a value of entry id.\n                    entryId = findData.text();\n                    // Get a tag of name.\n                    findData = $(xmlData).find(\"name\");\n                    // Get a value of name.\n                    entryName = findData.text();\n                    // Get a tag of tags.\n                    findData = $(xmlData).find(\"tags\");\n                    // Get a value of tags.\n                    entryTags = findData.text();\n                    // Get a tag of description.\n                    findData = $(xmlData).find(\"description\");\n                    // There exists description.\n                    if (findData !== null && typeof findData !== \"undefined\" && findData.text() !== \"\") {\n                        // Get a value of description.\n                        entryDescription = findData.text();\n                    } else {\n                        entryDescription = \"\";\n                    }\n                    // Get a tago of creator id.\n                    findData = $(xmlData).find(\"creatorId\");\n                    // Get a value of creator id.\n                    entryCreatorId = findData.text();\n\n                    // Prints back button.\n                    addBackButton();\n                    // Prints success message.\n                    printSuccessMessage(entryId, entryName, entryTags, entryDescription, entryCreatorId);\n                })\n                .fail(function(xmlData) {\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                    deleteUploadToken(serverHost, ks, uploadTokenId);\n                    printErrorMessage(\"Cannot attach uploaded file !<br>(Cannot connect to kaltura server.)\");\n                    return;\n                });\n            }\n\n            /**\n             * This function is callback for selection of media file.\n             * @access public\n             */\n            function handleFileSelect() {\n\n                var alertInfo = '';\n\n                // There exists selected file.\n                if ($(\"#fileData\")) {\n                    // Get an object of selected file.\n                    var file = $(\"#fileData\").prop(\"files\")[0];\n\n                    fileSize = parseInt(file.size);\n                    var typeResult = checkFileType(encodeURI(file.type));\n                    var sizeResult = checkFileSize();\n\n                    require(['core/str', 'core/notification'], function(str, notification) {\n                        var strings = [\n                            {key: 'wrong_filesize', component: 'local_yumymedia'},\n                            {key: 'unsupported_filetype', component: 'local_yumymedia'},\n                            {key: 'filesize', component: 'local_yumymedia'},\n                            {key: 'mimetype', component: 'local_yumymedia'}\n                        ];\n                        str.get_strings(strings).then(function(results) {\n                            // When file size is wrong.\n                            if (sizeResult === false) {\n                                alertInfo += results[0];\n                            }\n                            // When file is no supported.\n                            if (typeResult == \"N/A\") {\n                                alertInfo += results[1];\n                            }\n\n                            // When any warning occures.\n                            if (alertInfo !== \"\") {\n                                window.alert(alertInfo);\n                                $(\"#file_info\").html(\"\");\n                                $(\"#name\").val(\"\");\n                                $(\"#tags\").val(\"\");\n                                $(\"#description\").val(\"\");\n                                $(\"#type\").val(\"\");\n                                $(\"#fileData\").val(\"\");\n                            } else { // When any warning do not occures.\n                                var fileInfo = \"\";\n                                var sizeStr = \"\";\n                                var dividedSize = 0;\n\n                                fileName = file.name;\n\n                                if (fileSize > 1024 * 1024 * 1024) { // When file size exceeds 1GB.\n                                    dividedSize = fileSize / (1024 * 1024 * 1024);\n                                    sizeStr = dividedSize.toFixed(2) + \" G\";\n                                } else if (fileSize > 1024 * 1024) { // When file size exceeds 1MB.\n                                    dividedSize = fileSize / (1024 * 1024);\n                                    sizeStr = dividedSize.toFixed(2) + \" M\";\n                                } else if (fileSize > 1024) { // When file size exceeds 1kB.\n                                    dividedSize = fileSize / 1024;\n                                    sizeStr = dividedSize.toFixed(2) + \" k\";\n                                } else { // When file size under 1kB.\n                                    sizeStr = fileSize + \" \";\n                                }\n\n                                fileInfo += \"<div id=metadata_fields>\";\n                                fileInfo += results[2] + \": \" + sizeStr + \"bytes<br>\";\n                                fileInfo += results[3] + \":\" + encodeURI(file.type) + \"<br>\";\n                                fileInfo += \"</div><hr>\";\n\n                                $(\"#file_info\").html(fileInfo);\n                                $(\"#name\").val(fileName);\n                                $(\"#type\").val(typeResult);\n                            }\n                            return 0;\n                        }).fail(notification.exception);\n                    });\n                }\n\n                checkForm();\n            }\n\n            /**\n             * This function close kaltura session.\n             * @access public\n             */\n            function sessionEnd() {\n                var serverHost = $(\"#kalturahost\").val(); // Get hostname of kaltura server.\n                var serviceURL = serverHost + \"/api_v3/service/session/action/end\";\n\n                // Transmits data.\n                $.ajax({\n                    type: \"GET\",\n                    url: serviceURL,\n                    cache: false\n                })\n                .done(function(xmlData) {\n                    // Response is not XML.\n                    if (xmlData === null) {\n                        window.console.log(\"Cannot delete the uploadToken ! (Cannot get a XML response.)\");\n                    } else {\n                        window.console.log(\"Kaltura Session has been deleted.\");\n                    }\n                })\n                .fail(function(xmlData) {\n                    window.console.log(\"Cannot delete the uploadToken ! (Cannot connect to content server.)\");\n                    if (xmlData !== null) {\n                        window.console.dir(xmlData);\n                    }\n                });\n            }\n\n            // This function execute when window is chagned.\n            $(window).on(\"change\", function() {\n                checkForm();\n            });\n\n            // This function execute when window is uloaded.\n            $(window).on(\"unload\", function() {\n                sessionEnd();\n            });\n\n            // This function execute when window is resized.\n            $(window).resize(centeringModalSyncer);\n\n            $(\"#fileData\").on(\"change\", function() {\n                handleFileSelect();\n            });\n\n            $(\"#uploader_cancel\").on(\"click\", function() {\n                handleCancelClick();\n            });\n\n            $(\"#name\").on(\"change\", function() {\n                checkForm();\n            });\n\n            $(\"#tags\").on(\"change\", function() {\n                checkForm();\n            });\n\n            $(\"#entry_submit\").on(\"click\", function() {\n                handleSubmitClick();\n            });\n\n            $(\"#entry_reset\").on(\"click\", function() {\n                handleResetClick();\n            });\n\n            // This function execute when this script is loaded.\n            checkForm();\n\n        }\n    };\n});\n"],"names":["define","$","init","modalX","modalY","fileName","fileSize","MEDIA_TYPE","AUTO_FINALIZE","ENTRY_STATUS","ENTRY_IMPORTING","ENTRY_CONVERTING","ENTRY_IMPORT","ENTRY_PRECONVERT","ENTRY_READY","ENTRY_DELETED","ENTRY_PENDING","ENTRY_MODERATE","ENTRY_BLOCKED","ENTRY_NO_CONTENT","UPLOAD_TOKEN_STATUS","centeringModalSyncer","w","window","width","h","height","cw","outerWidth","ch","outerHeight","css","checkFileSize","maximumDataSizeStr","val","maximumDataSize","parseInt","checkForm","files","prop","handleCancelClick","location","href","addBackButton","require","str","message","get_string","when","done","localizedString","contentHtml","append","on","printErrorMessage","errorMessage","ks","uploadTokenId","deleteUploadToken","printSuccessMessage","id","name","tags","description","creatorId","notification","get_strings","key","component","then","results","scrollTo","fadeOut","remove","output","html","fail","exception","checkNameString","test","handleSubmitClick","serverHost","flag","nameStr","tagsStr","descStr","alert","checkMetadata","this","blur","dElm","document","documentElement","dBody","body","scrollLeft","scrollTop","fadeIn","fadeInModalWindow","findData","file","encodeURI","size","postData","type","cache","async","contentType","scriptCharset","dataType","serviceURL","ajax","xmlData","find","text","uploadTokenStatus","setTimeout","entryStatus","entryId","entryName","entryTags","entryDescription","entryCreatorId","controlId","trim","fd","FormData","mediaType","data","processData","strings","xhr","XHR","ajaxSettings","upload","addEventListener","e","newValue","loaded","total","console","log","IMPORT","IMPORTING","dir","attachUploadedFile","uploadMediaFile","createMediaEntry","createUploadToken","url","resize","fileType","alertInfo","typeResult","indexOf","sizeResult","fileInfo","sizeStr","toFixed","handleFileSelect"],"mappings":"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"}